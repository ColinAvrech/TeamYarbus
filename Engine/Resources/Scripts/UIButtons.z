class ExitButton : Component
{
	var Detector: MouseDetector = null;
  
	constructor() : base()
	{

	}

	function Initialize(owner:GameObject)
	{
		this.Owner = owner;
		this.Detector = new MouseDetector(this.Owner, this.OnMouseEvent);
		this.Detector.Rect.Width = 1.5;
		this.Detector.Rect.Height = 0.33;
		this.Detector.Offset = Real2(0, 0.02);
		EventSystem.Connect(Events.UpdateEvent, this.LogicUpdate);
	}
	
	function LogicUpdate(e: UpdateEvent)
	{
		//var dimensions = this.Owner.Transform.GetScreenPosition(Real2(1, 0.21));
		//this.Detector.Rect.Width = dimensions.X;
		//this.Detector.Rect.Height = dimensions.Y;
	}
	
	function OnMouseEvent(e: MouseEvent)
	{
		if (e.State == MouseState.MouseInside)
		{
			//Console.WriteLine(InputManager.IsMouseTriggered(Mouse.LEFT));
			
			if (InputManager.IsMouseTriggered(Mouse.LEFT))
			{
				
				ZInterface.QuitGame();
			}
			
		}
		else if (e.State == MouseState.MouseEnter)
		{
			//Console.WriteLine("Enter");
			this.Owner.Sprite.ChangeTexture("UIExitWhite.png");
		}
		else if (e.State == MouseState.MouseExit)
		{
			//Console.WriteLine("Exit");
			this.Owner.Sprite.ChangeTexture("UIExitBlack.png");
		}
		else
		{
			
		}
		//Console.WriteLine("MOUSE!");
	}
}

class ResumeButton : Component
{
	var Detector: MouseDetector = null;
	
	var MenuObjects:Array[GameObject] = new Array[GameObject]();
  
	constructor() : base()
	{

	}

	function Initialize(owner:GameObject)
	{
		this.Owner = owner;
		this.Detector = new MouseDetector(this.Owner, this.OnMouseEvent);
		this.Detector.Rect.Width = 1.5;
		this.Detector.Rect.Height = 0.33;
		this.Detector.Offset = Real2(0, 0.02);
		
		this.MenuObjects.Add(ZInterface.ObjectSystem.FindObjectByID(10));
		this.MenuObjects.Add(ZInterface.ObjectSystem.FindObjectByID(11));
		this.MenuObjects.Add(ZInterface.ObjectSystem.FindObjectByID(12));
		this.MenuObjects.Add(ZInterface.ObjectSystem.FindObjectByID(13));
		this.MenuObjects.Add(ZInterface.ObjectSystem.FindObjectByID(14));
		
		EventSystem.Connect(Events.UpdateEvent, this.LogicUpdate);
	}
	
	function LogicUpdate(e: UpdateEvent)
	{
		//var dimensions = this.Owner.Transform.GetScreenPosition(Real2(1, 0.21));
		//this.Detector.Rect.Width = dimensions.X;
		//this.Detector.Rect.Height = dimensions.Y;
	}
	
	function OnMouseEvent(e: MouseEvent)
	{
		if (e.State == MouseState.MouseInside)
		{
			if (InputManager.IsMouseTriggered(Mouse.LEFT))
			{
				foreach(var obj in this.MenuObjects)
				{
					obj.Sprite.ChangeColor(1,1,1,0);
				}
			}
		}
		else if (e.State == MouseState.MouseEnter)
		{
			//Console.WriteLine("Enter");
			this.Owner.Sprite.ChangeTexture("UIResumeWhite.png");
		}
		else if (e.State == MouseState.MouseExit)
		{
			//Console.WriteLine("Exit");
			this.Owner.Sprite.ChangeTexture("UIResumeBlack.png");
		}
		else
		{
			
		}
		//Console.WriteLine("MOUSE!");
	}
}

class HowToPlayButton : Component
{
	var Detector: MouseDetector = null;
	
	var SpawnedObject:GameObject = null;
  
	constructor() : base()
	{

	}

	function Initialize(owner:GameObject)
	{
		this.Owner = owner;
		this.Detector = new MouseDetector(this.Owner, this.OnMouseEvent);
		this.Detector.Rect.Width = 1.5;
		this.Detector.Rect.Height = 0.33;
		this.Detector.Offset = Real2(0, 0.02);
		EventSystem.Connect(Events.UpdateEvent, this.LogicUpdate);
	}
	
	function LogicUpdate(e: UpdateEvent)
	{
		//var dimensions = this.Owner.Transform.GetScreenPosition(Real2(1, 0.21));
		//this.Detector.Rect.Width = dimensions.X;
		//this.Detector.Rect.Height = dimensions.Y;
	}
	
	function OnMouseEvent(e: MouseEvent)
	{
		if (e.State == MouseState.MouseOutside)
		{
			//Console.WriteLine("Outside");
		}
		else if (e.State == MouseState.MouseEnter)
		{
			//Console.WriteLine("Enter");
			this.Owner.Sprite.ChangeTexture("UIHowToPlayWhite.png");
		}
		else if (e.State == MouseState.MouseExit)
		{
			//Console.WriteLine("Exit");
			this.Owner.Sprite.ChangeTexture("UIHowToPlayBlack.png");
		}
		else
		{
			
		}
		//Console.WriteLine("MOUSE!");
	}
}