/******************************************************************************/
/*!
\file   MouseCollision.z
\author Joshua Biggs
\par    Course: GAM205
\par    All content 2014 DigiPen (USA) Corporation, all rights reserved.
\brief  This file contains the Rectangle class, used to create bounding boxes.
		This file also contains the MouseDetector class, which uses a rectangle
		and determines if the mouse is ever colliding with it.
		Finally, this class contains the Enum for all of the different GLFW keys,
		to be used with the InputManager.
*/
/******************************************************************************/

enum MouseState
{
	MouseEnter,
	MouseExit,
	MouseInside,
	MouseOutside
}

class MouseEvent
{
	var State: MouseState = MouseState.MouseEnter;
	var Position: Real2 = Real2();
	
	constructor(state:MouseState, pos: Real2)
	{
		this.State = state;
		this.Position = pos;
	}
}

class MouseDetector
{
	var Target: GameObject = null;
	var Rect: Rectangle = null;
	var Funct: delegate(e: MouseEvent) = null;
	var CollidingLast: Boolean = false;
	var CollidingThis: Boolean = false;
	var Offset: Real2 = Real2();
	
	var Dot1:Dot = null;
	var Dot2:Dot = null;
	var Dot3:Dot = null;
	var Dot4:Dot = null;
	
	constructor(gameObject:GameObject, funct: delegate(e: MouseEvent))
	{
		if(gameObject.Sprite == null)
		{
			throw new Exception("The GameObject requires a Sprite component for MouseCollision.");
		}
		if(gameObject.Transform == null)
		{
			throw new Exception("The GameObject requires a Transform component for MouseCollision.");
		}
		this.Target = gameObject;
		this.Rect = new Rectangle(0,0);
		this.Funct = funct;
		this.Initialize();
		
		
	}

	function Initialize()
	{
		var sprite = this.Target.Sprite.Texture;
		var transform = this.Target.Transform;
		var scale = transform.GetScale();
		var dimensions = Real2(sprite.Width * scale.X, sprite.Height * scale.Y);
		this.Rect.Width = dimensions.X;
		this.Rect.Height = dimensions.Y;
		
		var position = transform.GetTranslation();
		this.Rect.X = position.X + this.Offset.X;
		this.Rect.Y = position.Y + this.Offset.Y;
		/*
		this.Dot1 = new Dot();
		this.Dot2 = new Dot();
		this.Dot3 = new Dot();
		this.Dot4 = new Dot();
		*/
		EventSystem.Connect(Events.UpdateEvent, this.LogicUpdate);
	}

	
	function LogicUpdate(e: UpdateEvent)
	{
		var transform = this.Target.Transform;
		var position = transform.GetTranslation();
		this.Rect.X = position.X + this.Offset.X;
		this.Rect.Y = position.Y + this.Offset.Y;
		var mousePos = Cinder.MouseToWorldZPlane();
		
		var collision = this.Rect.Contains(mousePos);
		/*
		this.Dot1.Object.Transform.SetTranslation(Real3(this.Rect.TopLeft().X,this.Rect.TopLeft().Y, position.Z));
		this.Dot2.Object.Transform.SetTranslation(Real3(this.Rect.TopRight().X,this.Rect.TopRight().Y,position.Z));
		this.Dot3.Object.Transform.SetTranslation(Real3(this.Rect.BottomLeft().X,this.Rect.BottomLeft().Y,position.Z));
		this.Dot4.Object.Transform.SetTranslation(Real3(this.Rect.BottomRight().X,this.Rect.BottomRight().Y,position.Z));
		*/
		
		this.CollidingThis = collision;
		
		
		if (this.CollidingLast && this.CollidingThis)
		{
			this.Funct(new MouseEvent(MouseState.MouseInside, mousePos));
		}
		else if (!this.CollidingLast && this.CollidingThis)
		{
			this.Funct(new MouseEvent(MouseState.MouseEnter, mousePos));
		}
		else if (this.CollidingLast && !this.CollidingThis)
		{
			this.Funct(new MouseEvent(MouseState.MouseExit, mousePos));
		}
		else if (!this.CollidingThis)
		{
			this.Funct(new MouseEvent(MouseState.MouseOutside, mousePos));
		}
		
		this.CollidingLast = this.CollidingThis;
	}
 
}

class Rectangle
{
	var Width: Real = 0;
	var Height: Real = 0;
	var X:Real = 0;
	var Y:Real = 0;
	
	
	constructor(width: Real, height: Real)
	{
		this.Width = width;
		this.Height = height;
	}
	constructor(dimensions: Real2)
	{
		this.Width = dimensions.X;
		this.Height = dimensions.Y;
	}
	
	function HalfWidth(): Real
	{
		return this.Width/2;
	}
	
	function HalfHeight(): Real
	{
		return this.Height/2;
	}
	
	function Contains(x: Real, y: Real):Boolean
	{
		var halfWidth = this.HalfWidth();
		var halfHeight = this.HalfHeight();
		if(x <= (this.X + halfWidth) && x >= (this.X - halfWidth))
		{
			if(y <= (this.Y + halfHeight) && y >= (this.X - halfHeight))
			{
				return true;
			}
		}
		
		return false;
	}
	
	function Contains(pos:Real2):Boolean
	{
		var halfWidth = this.HalfWidth();
		var halfHeight = this.HalfHeight();
		if(pos.X < (this.X + halfWidth) && pos.X > (this.X - halfWidth))
		{
			if(pos.Y < (this.Y + halfHeight) && pos.Y > (this.Y - halfHeight))
			{
				return true;
			}
		}
		
		return false;
	}
	 
	function TopLeft(): Real2
	{
		return Real2(this.X - this.HalfWidth(), this.Y + this.HalfHeight());
	}
	
	function TopRight(): Real2
	{
		return Real2(this.X + this.HalfWidth(), this.Y  + this.HalfHeight());
	}
	
	function BottomLeft(): Real2
	{
		return Real2(this.X - this.HalfWidth(), this.Y - this.HalfHeight());
	}
	
	function BottomRight(): Real2
	{
		return Real2(this.X + this.HalfWidth(), this.Y - this.HalfHeight());
	}
}

enum Keys
{
  	SPACE = 32,
  	APOSTROPHE = 39, 
  	COMMA = 44,
  	MINUS = 45, 
  	PERIOD = 46, 
  	SLASH = 47,
  	Num0 = 48,
  	Num1 = 49,
  	Num2 = 50,
  	Num3 = 51,
  	Num4 = 52,
  	Num5 = 53,
  	Num6 = 54,
  	Num7 = 55,
  	Num8 = 56,
  	Num9 = 57,
  	SEMICOLON = 59, 
  	EQUAL = 61,
  	A = 65,
  	B = 66,
  	C = 67,
  	D = 68,
  	E = 69,
  	F = 70,
  	G = 71,
  	H = 72,
  	I = 73,
  	J = 74,
  	K = 75,
  	L = 76,
  	M = 77,
  	N = 78,
  	O = 79,
  	P = 80,
  	Q = 81,
  	R = 82,
  	S = 83,
  	T = 84,
  	U = 85,
  	V = 86,
  	W = 87,
  	X = 88,
  	Y = 89,
  	Z = 90,
  	LEFT_BRACKET = 91,
  	BACKSLASH = 92,
  	RIGHT_BRACKET = 93,
  	GRAVE_ACCENT = 96,
  	WORLD_1 = 161,
  	WORLD_2 = 162,
  	ESCAPE = 256,
  	ENTER = 257,
  	TAB = 258,
  	BACKSPACE = 259,
  	INSERT = 260,
  	DELETE = 261,
  	RIGHT = 262,
  	LEFT = 263,
  	DOWN = 264,
  	UP = 265,
  	PAGE_UP = 266,
  	PAGE_DOWN = 267,
  	HOME = 268,
  	END = 269,
  	CAPS_LOCK = 280,
  	SCROLL_LOCK = 281,
  	NUM_LOCK = 282,
  	PRINT_SCREEN = 283,
  	PAUSE = 284,
  	F1 = 290,
  	F2 = 291,
  	F3 = 292,
  	F4 = 293,
  	F5 = 294,
  	F6 = 295,
  	F7 = 296,
  	F8 = 297,
  	F9 = 298,
  	F10 = 299,
  	F11 = 300,
  	F12 = 301,
  	F13 = 302,
  	F14 = 303,
  	F15 = 304,
  	F16 = 305,
  	F17 = 306,
  	F18 = 307,
  	F19 = 308,
  	F20 = 309,
  	F21 = 310,
  	F22 = 311,
  	F23 = 312,
  	F24 = 313,
  	F25 = 314,
  	DECIMAL = 330,
  	DIVIDE = 331,
  	MULTIPLY = 332,
  	SUBTRACT = 333,
  	LEFT_SHIFT = 340,
  	LEFT_ALT = 342,
  	LEFT_SUPER = 343,
  	RIGHT_SHIFT = 344,
  	RIGHT_CONTROL = 345,
  	RIGHT_ALT = 346,
  	RIGHT_SUPER = 347,
  	MENU = 348
}

enum Mouse
{
	LEFT,
	RIGHT,
	MIDDLE,
	BUTTON4,
	BUTTON5,
	BUTTON6,
	BUTTON7,
	BUTTON8
}
